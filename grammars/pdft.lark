start: block*

block:  dynamic_block
    | component_block
    | model_block

dynamic_block: "dynamics" "{" dynamics "}"

dynamics: [ dynamic_name_def ("," dynamic_name_def)* ]

component_block: "component" component_name_def [bindings] "{" (component_stmt)* "}"

bindings: "<" binding_name_def ("," binding_name_def)* ">"

component_stmt: parameter_stmt
    | state_stmt
    | inport_stmt
    | outport_stmt
    | transition_stmt

parameter_stmt: "parameters" "{" parameter_assign* "}"

parameter_assign: parameter_name_def "=" parameter_value ";"

state_stmt: "states" ":" state_name_def ("," state_name_def)* ";"

inport_stmt: "inports" "{" (inports)*  "}"

inports: inport_name_def "{" inport_value_def ("," inport_value_def)*  "}" ";"

outport_stmt: "outport" ":" outport_name_def "{" outport_value_def ("," outport_value_def)*  "}" ";"

transition_stmt: "transitions" "{" transition* "}"

transition: from_name trigger? "-" weight? "->" to_name action? ";"

trigger: "[" condition "]"

condition: simplecondition
    | "(" condition ")"
    | condition binary_operator condition
    | unary_operator condition

simplecondition: lvalue comp_op rvalue
     | "{" distribution "(" parameter_name_use ")" "}"

binary_operator: and_operator
    | or_operator

unary_operator: not_operator

not_operator: "not"

and_operator: "and"

or_operator: "or"

from_name: state_name_use

to_name: state_name_use

distribution: "exp"

comp_op: "<" | ">" | "<=" | ">=" | "==" | "!="

action: "/" outport_value_use

model_block: "model" model_name "{" (model_stmt)* "}"

model_stmt: parameter_stmt
    | dynamic_stmt
    | object_stmt
    | event_stmt
    | cost_stmt

dynamic_stmt: "dynamics" ":" dynamic_name_use ("," dynamic_name_use)* ";"

object_stmt: instance_name_def component_name_use actual_binding? ";"

actual_binding: "<" binding_value ("," binding_value)* ">"

event_stmt: from_port "-" weight? "->" to_port ";"

from_port: instance_name_use "." outport_name_use

to_port: instance_name_use "." outport_name_use

weight: "(" likelihood ")"

cost_stmt: "cost" "{" (cost_item)* "}"

cost_item: condition ":" cost_value ";"

cost_value: STRING | NUMBER
binding_value: STRING | NUMBER
instance_name_def: STRING
instance_name_use: STRING
likelihood: NUMBER
lvalue: STRING | NUMBER
rvalue: STRING | NUMBER
outport_value_use: STRING
outport_value_def: STRING
outport_name_use: STRING
outport_name_def: STRING
inport_value_def: STRING
inport_value_use: STRING
inport_name_def: STRING
inport_name_use: STRING
state_name_use: STRING
state_name_def: STRING
parameter_name_def: STRING
parameter_name_use: STRING
parameter_value: NUMBER
model_name: STRING
binding_name_def: STRING
component_name_def: STRING
component_name_use: STRING
dynamic_name_def: STRING
dynamic_name_use: STRING

STRING: /[_a-zA-Z][_a-zA-Z0-9\/]*/
NUMBER: INTEGER | DECIMAL
INTEGER : /[0-9]+/
DECIMAL: INTEGER? "." INTEGER  //# Will be matched before INTEGER

%import common.WS
%ignore WS
